//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue")
    /// Color `light-black`.
    static let lightBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "light-black")
    /// Color `light-grey`.
    static let lightGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "light-grey")
    
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "light-black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlack, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "light-grey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGrey, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `info-icon`.
    static let infoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "info-icon")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    
    /// `UIImage(named: "info-icon", bundle: ..., traitCollection: ...)`
    static func infoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.infoIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ImageDetailsViewController`.
    static let imageDetailsViewController = _R.nib._ImageDetailsViewController()
    /// Nib `ImageTableViewCell`.
    static let imageTableViewCell = _R.nib._ImageTableViewCell()
    /// Nib `ImagesListViewController`.
    static let imagesListViewController = _R.nib._ImagesListViewController()
    
    /// `UINib(name: "ImageDetailsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageDetailsViewController) instead")
    static func imageDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageDetailsViewController)
    }
    
    /// `UINib(name: "ImageTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageTableViewCell) instead")
    static func imageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageTableViewCell)
    }
    
    /// `UINib(name: "ImagesListViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imagesListViewController) instead")
    static func imagesListViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imagesListViewController)
    }
    
    static func imageDetailsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imageDetailsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func imageTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageTableViewCell? {
      return R.nib.imageTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageTableViewCell
    }
    
    static func imagesListViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imagesListViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ImageTableViewCell`.
    static let imageTableViewCell: Rswift.ReuseIdentifier<ImageTableViewCell> = Rswift.ReuseIdentifier(identifier: "ImageTableViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// Base translation: Created by Maksym Savisko
      /// 
      /// Locales: Base
      static let imageDetailsInfoAlertTitle = Rswift.StringResource(key: "imageDetailsInfoAlertTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Details
      /// 
      /// Locales: Base
      static let imageDetailsNavigationTitle = Rswift.StringResource(key: "imageDetailsNavigationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Error
      /// 
      /// Locales: Base
      static let defaultError = Rswift.StringResource(key: "defaultError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: List
      /// 
      /// Locales: Base
      static let imageListNavigationTitle = Rswift.StringResource(key: "imageListNavigationTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: OK
      /// 
      /// Locales: Base
      static let defaultOk = Rswift.StringResource(key: "defaultOk", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: RANDOM
      /// 
      /// Locales: Base
      static let imageDetailsBottomButtonTitle = Rswift.StringResource(key: "imageDetailsBottomButtonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: SELECT
      /// 
      /// Locales: Base
      static let imageDetailsUpperButtonTitle = Rswift.StringResource(key: "imageDetailsUpperButtonTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: The time now is %@
      /// 
      /// Locales: Base
      static let imageDetailsInfoAlertSubtitle = Rswift.StringResource(key: "imageDetailsInfoAlertSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: Created by Maksym Savisko
      /// 
      /// Locales: Base
      static func imageDetailsInfoAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("imageDetailsInfoAlertTitle", bundle: R.hostingBundle, value: "Created by Maksym Savisko", comment: "")
      }
      
      /// Base translation: Details
      /// 
      /// Locales: Base
      static func imageDetailsNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("imageDetailsNavigationTitle", bundle: R.hostingBundle, value: "Details", comment: "")
      }
      
      /// Base translation: Error
      /// 
      /// Locales: Base
      static func defaultError(_: Void = ()) -> String {
        return NSLocalizedString("defaultError", bundle: R.hostingBundle, value: "Error", comment: "")
      }
      
      /// Base translation: List
      /// 
      /// Locales: Base
      static func imageListNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("imageListNavigationTitle", bundle: R.hostingBundle, value: "List", comment: "")
      }
      
      /// Base translation: OK
      /// 
      /// Locales: Base
      static func defaultOk(_: Void = ()) -> String {
        return NSLocalizedString("defaultOk", bundle: R.hostingBundle, value: "OK", comment: "")
      }
      
      /// Base translation: RANDOM
      /// 
      /// Locales: Base
      static func imageDetailsBottomButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("imageDetailsBottomButtonTitle", bundle: R.hostingBundle, value: "RANDOM", comment: "")
      }
      
      /// Base translation: SELECT
      /// 
      /// Locales: Base
      static func imageDetailsUpperButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("imageDetailsUpperButtonTitle", bundle: R.hostingBundle, value: "SELECT", comment: "")
      }
      
      /// Base translation: The time now is %@
      /// 
      /// Locales: Base
      static func imageDetailsInfoAlertSubtitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("imageDetailsInfoAlertSubtitle", bundle: R.hostingBundle, value: "The time now is %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ImageDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ImageDetailsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ImageTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ImageTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ImageTableViewCell"
      let name = "ImageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ImagesListViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ImagesListViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

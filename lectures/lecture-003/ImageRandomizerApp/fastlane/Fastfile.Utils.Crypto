# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command
# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`
# If you want to automatically update fastlane if a new version is available:
# update_fastlane
# This is the minimum version number required.
# Update this, if you use features of a newer version
#
#
fastlane_version "2.119.0"

default_platform :ios

platform :ios do
  desc "Decrypt match repo"
  #Changes: https://github.com/fastlane/fastlane/commit/cc282f264f8cefbd8561cd9b1388c75d073307a1
  #Insipred by: https://github.com/fastlane/fastlane/issues/13521#issuecomment-430230565
  #Sources:
  #1. Storage: https://github.com/fastlane/fastlane/blob/cc282f264f8cefbd8561cd9b1388c75d073307a1/match/lib/match/storage/git_storage.rb
  #2. Encrypt: https://github.com/fastlane/fastlane/blob/cc282f264f8cefbd8561cd9b1388c75d073307a1/match/lib/match/encryption/openssl.rb
  lane :match_decrypt_repo do |values|
    require 'match'
    git_url = values[:git_url] ? ENV["MATCH_GIT_URL"] : nil

    #Check git_url name
    if git_url == nil
      git_url = UI.input("Provide git_url for match repo: ")
      if git_url == nil
        UI.crash! "git_url parameter is empty. Define MATCH_GIT_URL"
      end
    end

    #Check password
    password = ENV["MATCH_PASSWORD"]
    if password == nil
        UI.crash! "password parameter is empty. Define MATCH_PASSWORD"
    end

    #Check git_branch
    git_branch = values[:git_branch] ? values[:git_branch] : nil
    if git_branch == nil
      git_branch = UI.input("Provide git_branch for match repo: ")
      if git_branch == nil
        git_branch = "master"
      end
    end

    shallow_clone = false
    skip_docs = true
    clone_branch_directly = true

    #clone repo
    storage = Match::Storage.for_mode('git', {
      git_url: git_url,
      shallow_clone: shallow_clone,
      skip_docs: skip_docs,
      git_branch: git_branch,
      clone_branch_directly: clone_branch_directly
    })
    storage.download

    #decrypt repo
    encryption = Match::Encryption.for_storage_mode('git', {
      git_url: git_url,
      working_directory: storage.working_directory
    })
    encryption.decrypt_files

    UI.success("Decrypted repo")
    UI.success("Url: #{git_url}")
    UI.success("Branch: #{git_branch}")
    UI.success("Path: #{storage.working_directory}")
    
  end

  desc "Encrypt match repo on path"
  lane :match_encrypt_repo do |values|
    require 'match'
    path = values[:path]
    message = values[:message]
    git_url = values[:git_url]
    git_branch = values[:git_branch]

    #Check path
    if path == nil
      path = UI.input("Provide local repo path to encrypt: ")
      if path == nil
        UI.crash! "path parameter is empty."
      end
    end

    #Check message
    if message == nil
      message = UI.input("Provide commit message: ")
      if message == nil
        UI.crash! "message parameter is empty."
      end
    end

    #Check git_url
    if git_url == nil
      git_url = UI.input("Provide git_url to push changes: ")
      if git_url == nil
        UI.crash! "git_url parameter is empty."
      end
    end
    
    if git_branch == nil
      git_branch = UI.input("Provide git_branch to push changes: ")
      if git_branch == nil
        git_branch = "master"
      end
    end

    shallow_clone = false
    skip_docs = true
    clone_branch_directly = true

    #clone repo
    storage = Match::Storage.for_mode('git', {
      git_url: git_url,
      shallow_clone: shallow_clone,
      skip_docs: skip_docs,
      git_branch: git_branch,
      clone_branch_directly: clone_branch_directly
    })
    storage.download

    UI.message("Download repo at path: #{storage.working_directory}")

    #Remove old files from remote repo
    FileUtils.rm_rf("#{storage.working_directory}/.", secure: true)
    is_storage_working_path_empty = Dir.empty?("#{storage.working_directory}")
    if is_storage_working_path_empty == false
      UI.crash! "Could not delete old files from cloned remote repo at path: #{storage.working_directory}"
    end

    #Check that path where exist new files (that will be updated), exist and not empty
    if File.directory?(path) == false
      UI.crash! "Could not find directory at path: #{path}"
    end

    #Check that path where not empty
    if Dir.empty?(path) == true
      UI.crash! "Could not find files to update at path: #{path}"
    end

    #Copy new files from previous path to new path where storage exist
    FileUtils.cp_r("#{path}/.", "#{storage.working_directory}")

    #Encrypt repo
    encryption = Match::Encryption.for_storage_mode('git', {
      git_url: git_url,
      working_directory: storage.working_directory
    })

    #After Google cloud support added, we need to provide list of files to commit
    # https://github.com/fastlane/fastlane/issues/13963
    # https://github.com/fastlane/fastlane/issues/13963#issuecomment-449564374
    # https://github.com/fastlane/fastlane/blob/4915175c89d097ae20ef8e7fbb1b2a324d93f675/match/lib/match/change_password.rb
    files_to_commit = encryption.encrypt_files

    #Try to push changes
    storage.save_changes!(files_to_commit: files_to_commit, custom_message: message)

    UI.success("Encrypt and push repo")
    UI.success("Url: #{git_url}")
    UI.success("Branch: #{git_branch}")
    UI.success("Update FROM path: #{path}")
    UI.success("Message: #{message}")

  end

end
# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions
# fastlane reports which actions are used. No personal data is recorded.
## Learn more at https://github.com/fastlane/fastlane#metrics